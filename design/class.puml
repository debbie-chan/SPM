@startuml Class
!include style.puml

package User {
    class UserController
    class AdminController
    class Learner
    class LearnerController
    Learner -- AdminController
}

class UserController #pink {
    + getAllUsers()
    + getAllOfRole(userRole)
    + getEnrolledLearners(courseCode, classCode)
    + getPendingLearners(courseCode, classCode)
    + getUnenrolledLearners(courseCode, classCode)
    + getOneUser(userRole, username)
    + createUser()
}

class AdminController #pink {
    + assignTrainerToClass(username, courseCode, classCode)
    + verifyLearner(username, courseCode, classCode)
    + assignLearnerToClass(username, courseCode, classCode)
}

class Learner #technology {
    - learnerDoc
    + ifPreReqMet(preRequisites)
    + ifNotCompleted(courseCode)
    + ifNotEnrolled(courseCode)
}

class LearnerController #pink {
    + addPendingCourse(username, courseCode, classCode)
    + deletePendingCourse(username, courseCode, classCode)
}

package Course {
    class Course
    class CourseController
    class Class
    class ClassController
    class LessonController
    Course -- AdminController
    Class -- AdminController
}

class Course #technology {
    - courseDoc
    + getPreRequisites()
}

class CourseController #pink {
    + getAllCourses()
    + getOneCourse(courseCode)
    + getAllClassesInCourse(courseCode)
    + createCourse()
}

class Class #technology {
    - classDoc
    + ifNotFull()
    + ifEnrollmentOpen()
}

class ClassController #pink {
    + getAllClasses()
    + getOneClass(classCode)
    + createClass()
}

class LessonController #pink {
    + getAllLessonsInClass(courseCode, classCode)
    + createLesson()
}

package Quiz {
    class Quiz
    class QuizController
    class QuestionController
}

class Quiz #technology {
    + getQuiz(lessonCode)
    + getFinalGrade(username, courseCode)
    + updateCompletedCourses(username)
}

class QuizController #pink {
    + gradeQuiz()

}

class QuestionController #pink {
    + addQuestions()
}

@enduml